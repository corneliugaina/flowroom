{"version":3,"sources":["assets/img/hint.png","components/Navbar.js","components/Home.js","components/About.js","highOrderComponents/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","react_router_dom","to","Home","console","log","this","posts","postList","length","map","post","key","id","src","Hint","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","colours","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","parseInt","dispatch","type","App","components_Navbar","react_router","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2772b2e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hint.d4efbfb6.png\";","import React from 'react';\nimport { Link, NavLink, withRouter } from 'react-router-dom'\n\nconst Navbar = (props) => {\n/*     console.log(props)\n    setTimeout(() => {\n        props.history.push('/about')\n    }, 2000)  */\n    return (\n        <nav className=\"nav-wrapper blue darken-3\">\n            <div className=\"container\">\n                <ul className=\"right\">\n                    <li><Link to=\"/\">Home</Link></li>\n                    <li><Link to=\"/about\">About</Link></li>\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li> {/* NavLink permits to have a class active, it helps to stylizing when URL matches */}\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default withRouter(Navbar);","import React, { Component } from 'react'\n// import axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport Hint from '../assets/img/hint.png'\nimport { connect } from 'react-redux' // we invoke this function + export the component wrapped in this (see bellow)\n\nclass Home extends Component {\n    // Nous n'allons plus utiliser Axios ni le state dans le component (il sera dans le store maintenant)\n    /*     state = {\n        posts: [ ]\n    }\n    componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(res => {\n            console.log(res)\n            this.setState({\n                posts: res.data.slice(0, 10)\n            }) // the response data with properties (id, title, ...)\n        })\n    } */\n    render(){\n        console.log(this.props)\n        const { posts } = this.props; // we are cycling in the props received by the component, instead of the state \n        const postList = posts.length ? (\n            posts.map(post => {\n                return (\n                    <div className=\"post card\" key={post.id}>\n                        <img src={Hint} alt=\"an insightful bulb\"/>\n                        <div className=\"card-content\">\n                            <Link to={'/' + post.id}> {/* we surround the post and give an url to it */}\n                            <span className=\"card-title\">{post.title}</span>\n                            </Link>\n                            <p>{post.body}</p>\n                        </div>\n                    </div>\n                )\n                })\n        ) : (\n            <div className=\"center\">No posts Yet</div>\n        ); \n        return (\n            <div className=\"container home\">\n                <h4 className=\"center\">Home</h4>\n                {postList}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.posts\n    }\n}\n\nexport default connect(mapStateToProps)(Home);","import React from 'react'\nimport Rainbow from '../highOrderComponents/Rainbow'\n\nconst About = () => {\n    return (\n        <div className=\"container\">\n            <h4 className=\"center\">About</h4>\n            <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nobis dicta odit quibusdam maiores, nostrum labore eum aperiam quaerat voluptatem natus itaque sint enim sequi quidem eos ratione ex ipsum reiciendis!</p>\n        </div>\n    )\n}\n\nexport default Rainbow(About);","import React from 'react'\n\n\nconst Rainbow = (WrappedComponent) => {\n\n    const colours = ['red', 'pink', 'orange', 'blue', 'green', 'black'];\n    const randomColour = colours[Math.floor(Math.random() * colours.length) % 6];\n    const className = randomColour + '-text';\n\n    return (props) => {\n        return (\n            <div className={className}>\n                <WrappedComponent {...props}/>\n            </div>\n        )\n    }\n}\n\nexport default Rainbow;","import React from 'react'\n\nconst Contact = (props) => {\n    console.log(props)\n    // setTimeout(() => {\n    //    props.history.push('/about')\n    // }, 2000) \n    // This is programmatic redirects : after 2 seconds, the user is redirected on the path (object 'history', mathod 'push' + location)\n    return (\n        <div className=\"container\">\n            <h4 className=\"center\">Contact</h4>\n            <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nobis dicta odit quibusdam maiores, nostrum labore eum aperiam quaerat voluptatem natus itaque sint enim sequi quidem eos ratione ex ipsum reiciendis!</p>\n        </div>\n    )\n}\n\nexport default Contact;","import React, { Component } from 'react'\n// import axios from 'axios'\nimport { connect } from 'react-redux'\nimport { deletePost } from '../actions/postActions'\n\nclass Post extends Component {\n/*     state = {\n        post : null // in console, we'll get an object with match property and params with post_id\n    }\n    componentDidMount(){\n        let id = this.props.match.params.post_id; // the id from url is assigned\n        axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\n            .then(res => {\n                this.setState({\n                    post: res.data\n                })  \n                console.log(res)\n            })\n    } */\n\n\nhandleClick = () => {\n    this.props.deletePost(this.props.post.id);\n    this.props.history.push('/');\n}\n\n    render() {\n        // creating some JSX for the post :\n        console.log(this.props)\n        const post = this.props.post ? (\n            <div className=\"post\">\n                <h4 className=\"center\">{this.props.post.title}</h4>\n                <p>{this.props.post.body}</p>\n                <div className=\"center\">\n                    <button className=\"btn grey\" onClick={this.handleClick}>\n                        DELETE\n                    </button>\n                </div>\n            </div>\n        ) : (\n            <div className=\"center\">Loading post...</div>\n        )\n\n        return (\n            <div className=\"container\">\n                { post }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => { // the second argument refers to the props of the above component\n    let id = ownProps.match.params.post_id;\n    //console.log(id)\n    return {\n        post: state.posts.find(post => post.id === parseInt(id))\n        // post: state.posts.find(post => post.id == id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deletePost: (id) => { \n            dispatch(deletePost(id))\n        }\n    }\n}\n\n// store.dispatch({type: }) // alors qu'on a notre fonction avec 'dispatch' en argument, on ne doit plus créer le store.dispatch...\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","export const deletePost = (id) => {\n    return {\n        type: 'DELETE_POST',\n        id\n    }\n}","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Post from './components/Post'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <h3 className=\"brand-logo center cover\">FlowRoom</h3>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route path=\"/:post_id\" component={Post} /> {/* we'll get access to the extra information in the object automatically */}       \n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState  = {\n    posts: [\n        {id: 1, title: 'Workshop : Components Reutilisables', body: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis maxime exercitationem officia, tempora magnam, quaerat amet quis consequuntur eius iusto laudantium incidunt, quasi laborum explicabo laboriosam libero illo ea velit.'},\n        {id: 2, title: 'Workshop : GraphQL : Connect API to React via GraphQL schema', body: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis maxime exercitationem officia, tempora magnam, quaerat amet quis consequuntur eius iusto laudantium incidunt, quasi laborum explicabo laboriosam libero illo ea velit.'},\n        {id: 3, title: 'Workshop : Introduction to docker', body: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis maxime exercitationem officia, tempora magnam, quaerat amet quis consequuntur eius iusto laudantium incidunt, quasi laborum explicabo laboriosam libero illo ea velit.'}\n        \n    ]\n}\n\nconst rootReducer = (state = initState, action) => {\n    // console.log(action);\n    if (action.type === 'DELETE_POST') {\n        let newPosts = state.posts.filter(post => {\n            return action.id !== post.id\n        });\n        return {\n            ...state,\n            posts: newPosts\n        }\n    }\n    return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider} from 'react-redux'; // will sorround and wrap our root App component + pass the store into provider (see bellow)\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}